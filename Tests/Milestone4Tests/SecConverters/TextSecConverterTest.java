package Milestone4Tests.SecConverters;

import Operations.*;
import SecConverters.TextSecConverter;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.LinkedHashMap;

import static org.junit.Assert.assertArrayEquals;

class TextSecConverterTest {
    String textSec1 = "240100c8\n" +
            "2402012c\n" +
            "24030190\n" +
            "240401f4\n" +
            "24050258\n" +
            "240602bc\n" +
            "24070320\n" +
            "24080384\n" +
            "240903e8\n" +
            "240a044c\n" +
            "240b04b0\n" +
            "240c0514\n" +
            "240d0578\n" +
            "240e05dc\n" +
            "240f0640\n" +
            "241006a4\n" +
            "24110708\n" +
            "2412076c\n" +
            "241307d0\n" +
            "24140834\n" +
            "24150898\n" +
            "241608fc\n" +
            "24170960\n" +
            "241809c4\n" +
            "24190a28\n" +
            "241a0a8c\n" +
            "241b0af0\n" +
            "241c0b54\n" +
            "241d0bb8\n" +
            "241e0c1c\n" +
            "241f0c80\n" +
            "022f4020\n" +
            "27620064\n" +
            "012a2024\n" +
            "3130000a\n" +
            "1109000a\n" +
            "15090009\n" +
            "3c0c0064\n" +
            "8d320000\n" +
            "012ac825\n" +
            "3523000a\n" +
            "012a082a\n" +
            "012ab822\n" +
            "ad280000\n" +
            "0810002e\n" +
            "0000000c\n" +
            "3c011001\n" +
            "34240000\n" +
            "24020004\n" +
            "0000000c";

    Operation[] op_arr1 = new Operation[]{
    new Addiu("00100100000000010000000011001000"),
    new Addiu("00100100000000100000000100101100"),
    new Addiu("00100100000000110000000110010000"),
    new Addiu("00100100000001000000000111110100"),
    new Addiu("00100100000001010000001001011000"),
     new Addiu("00100100000001100000001010111100"),
    new Addiu("00100100000001110000001100100000"),
    new Addiu("00100100000010000000001110000100"),
    new Addiu("00100100000010010000001111101000"),
     new Addiu("00100100000010100000010001001100"),
    new Addiu("00100100000010110000010010110000"),
    new Addiu("00100100000011000000010100010100"),
    new Addiu("00100100000011010000010101111000"),
    new Addiu("00100100000011100000010111011100"),
    new Addiu("00100100000011110000011001000000"),
    new Addiu("00100100000100000000011010100100"),
    new Addiu("00100100000100010000011100001000"),
    new Addiu("00100100000100100000011101101100"),
    new Addiu("00100100000100110000011111010000"),
    new Addiu("00100100000101000000100000110100"),
    new Addiu("00100100000101010000100010011000"),
    new Addiu("00100100000101100000100011111100"),
    new Addiu("00100100000101110000100101100000"),
    new Addiu("00100100000110000000100111000100"),
    new Addiu("00100100000110010000101000101000"),
    new Addiu("00100100000110100000101010001100"),
    new Addiu("00100100000110110000101011110000"),
    new Addiu("00100100000111000000101101010100"),
    new Addiu("00100100000111010000101110111000"),
    new Addiu("00100100000111100000110000011100"),
    new Addiu("00100100000111110000110010000000"),
    new Add("00000010001011110100000000100000"),
    new Addiu("00100111011000100000000001100100"),
    new Add("00000001001010100010000000100100"),
    new AndI("00110001001100000000000000001010"),
    new Beq("00010001000010010000000000001010"),
    new Bne("00010101000010010000000000001001"),
    new Lui("00111100000011000000000001100100"),
    new Lw("10001101001100100000000000000000"),
    new Or("00000001001010101100100000100101"),
    new Ori("00110101001000110000000000001010"),
    new Slt("00000001001010100000100000101010"),
    new Sub("00000001001010101011100000100010"),
    new Sw("10101101001010000000000000000000"),
    new j("00001000000100000000000000101110"),
    new Syscall(),
    new Lui("00111100000000010001000000000001"),
    new Ori("00110100001001000000000000000000"),
    new Addiu("00100100000000100000000000000100"),
    new Syscall()
    };

    @Test
    void textSec_Converter() {
        TextSecConverter.textSec_Converter(textSec1);
        String[] exp_op;
        String[] actual_op;
        for (int i =0; i<op_arr1.length; i++) {
            exp_op = op_arr1[i].getInstruction();
            actual_op = TextSecConverter.text_mem[i].getInstruction();
            assertArrayEquals(exp_op,actual_op);
        }
    }
}