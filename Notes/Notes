####################################################################################################
---:Random Notes:---
- To re-use all of our previous code, all operation instance variables are sent in binary
  ... this means each operate method will have convert the binary registers into it’s actual register and then use CPU's methods

 OPERATE METHODS STUCTURE:
 - 1] Constructor will send in machine code of the instruction in 32 binary
    - REGISTERS WILL BE SET IN HEX
 (new stuff below...)
 - 2] Convert Register fields from Hex -> Register
    - CPU.hex_to_reg("01")
 - 3] Get the "actual value" inside the register inside CPU
    - hm = CPU.get_registers_state()
    - hm.get(“$at”)
 - 4] Perform operation
    - Update CPU via "CPU.update_register("$reg", int val)""
TEST OPERATIONS STRUCTURE:
- Ex: Add object representing "Add: add v0 a0 a1" ...
- 1] EVERY TEST IS GOING TO NEED TO SET THE CPU. (See GetRegisterStateTest to steal code)
    - $a0 = 2
    - $a1 = 3
- 2] Create instance of class w/ specified registers ^
    - Used MIPS Instruction Calculator to create different “add” instructions (to get the binary)
    - Created exactly same way as previous tests: enter 32 bit binary String
- 3] .operate()
- 4] Assert the operation changes appropriate registers
    - AssertEquals(hm.get(“$v0”), 5)

####################################################################################################